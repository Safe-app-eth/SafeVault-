# Define base folder
base_path = Path("/mnt/data/SafeVault-Token-Proposal")
scripts_path = base_path / "scripts"
workflows_path = base_path / ".github" / "workflows"
scripts_path.mkdir(parents=True, exist_ok=True)
workflows_path.mkdir(parents=True, exist_ok=True)

# GitHub workflow file for /propose-token comment trigger
workflow_token = """
name: üí¨ Token Transfer Safe Proposal

on:
  issue_comment:
    types: [created]

jobs:
  propose-token:
    if: startsWith(github.event.comment.body, '/propose-token')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install node-fetch@2

      - name: Run Token Proposal Script
        env:
          SAFE_ADDRESS: ${{ secrets.SAFE_ADDRESS }}
          SAFE_RPC_URL: ${{ secrets.SAFE_RPC_URL }}
          REOWN_API_KEY: ${{ secrets.REOWN_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: node scripts/parseTokenProposal.js
"""

(workflows_path / "token-transfer.yml").write_text(workflow_token.strip())

# ERC20 Token Proposal Script
token_script = """
const fetch = require("node-fetch");

const comment = process.env.COMMENT_BODY;
const safeAddress = process.env.SAFE_ADDRESS;
const rpcUrl = process.env.SAFE_RPC_URL;
const apiKey = process.env.REOWN_API_KEY;

const ethers = require("ethers");

// Predefined Ethereum mainnet token list
const tokenList = {
  USDC: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eb48",
  WETH: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
};

const ERC20_ABI = ["function transfer(address to, uint256 amount)"];

const parseComment = (input) => {
  const parts = input.trim().split(/\\s+/);
  if (parts.length !== 4) throw new Error("Invalid format. Use /propose-token SYMBOL 0xTo 100");
  const [, symbol, to, amount] = parts;
  return { symbol, to, amount };
};

(async () => {
  try {
    const { symbol, to, amount } = parseComment(comment);
    const token = tokenList[symbol.toUpperCase()];
    if (!token) throw new Error("Unsupported token symbol");

    const iface = new ethers.utils.Interface(ERC20_ABI);
    const data = iface.encodeFunctionData("transfer", [to, ethers.utils.parseUnits(amount, 6)]); // USDC has 6 decimals

    const tx = {
      to: token,
      value: "0",
      data,
      operation: 0,
    };

    const response = await fetch("https://api.reown.com/safe/propose", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${apiKey}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        safeAddress,
        rpcUrl,
        tx,
        description: `Send ${amount} ${symbol.toUpperCase()} to ${to}`,
      }),
    });

    const res = await response.json();
    if (response.ok) {
      console.log("‚úÖ Token proposal created:", res);
    } else {
      console.error("‚ùå Proposal failed:", res);
    }
  } catch (err) {
    console.error("‚ùå Error:", err.message);
  }
})();
"""

(scripts_path / "parseTokenProposal.js").write_text(token_script.strip())

# README file
readme = """
# üí¨ GitHub Comment: Token Transfer Proposal (Ethereum)

## üîÅ Format:
/propose-token USDC 0xRecipientAddress 100

‚úÖ Automatically creates a Safe proposal via Reown to transfer tokens (on Ethereum mainnet).

## üß† Supported Tokens (Ethereum):
- USDC
- WETH

## üìÅ Files
- `.github/workflows/token-transfer.yml` ‚Äî GitHub Action trigger
- `scripts/parseTokenProposal.js` ‚Äî Parses + sends transaction

## üîí Required GitHub Secrets:
- `SAFE_ADDRESS`
- `SAFE_RPC_URL`
- `REOWN_API_KEY`
- `GITHUB_TOKEN`
"""

(base_path / "README.md").write_text(readme.strip())

# Zip it up
zip_file = Path("/mnt/data/SafeVault-Token-Proposal.zip")
with ZipFile(zip_file, "w") as zipf:
    for file in base_path.rglob("*"):
        if file.is_file():
            zipf.write(file, file.relative_to(base_path))

zip_file.name
