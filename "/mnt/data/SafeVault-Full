import shutil

# Prepare directories for full SafeVault project structure
safevault_full_dir = "/mnt/data/SafeVault-Full"
os.makedirs(safevault_full_dir, exist_ok=True)

# Move existing PWA config into full structure
shutil.copytree(base_dir, safevault_full_dir, dirs_exist_ok=True)

# Add mock/fake AppKit Safe integration (placeholder until full backend drop)
safe_config_code = """// appkit-safe-config.ts
export const SAFE_ADDRESS = "0xAfD5f60aA8eb4F488eAA0eF98c1C5B0645D9A0A0";
export const CHAIN_ID = 42161; // Arbitrum
"""

reown_signer_ui = """// ReownSigner.tsx
export default function ReownSigner() {
  return (
    <div>
      <h2>Reown Signer UI üîê</h2>
      <p>This will connect to Reown MPC to approve Safe transactions securely.</p>
    </div>
  );
}
"""

proposal_queue_ui = """// ProposalQueue.tsx
export default function ProposalQueue() {
  return (
    <div>
      <h2>üßæ Proposal Queue</h2>
      <p>View and approve pending Safe transactions here.</p>
    </div>
  );
}
"""

# Save AppKit + Reown files
components_dir = os.path.join(safevault_full_dir, "components")
os.makedirs(components_dir, exist_ok=True)

with open(os.path.join(safevault_full_dir, "appkit-safe-config.ts"), "w") as f:
    f.write(safe_config_code)

with open(os.path.join(components_dir, "ReownSigner.tsx"), "w") as f:
    f.write(reown_signer_ui)

with open(os.path.join(components_dir, "ProposalQueue.tsx"), "w") as f:
    f.write(proposal_queue_ui)
