# GitHub workflow for label-based trigger
workflow = """
name: üè∑ Label-Based Safe Proposal Trigger

on:
  pull_request:
    types: [labeled]

jobs:
  trigger-proposal:
    if: github.event.label.name == 'safe-proposal'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install node-fetch@2 ethers@5

      - name: Trigger Safe Proposal via Label
        env:
          SAFE_ADDRESS: ${{ secrets.SAFE_ADDRESS }}
          SAFE_RPC_URL: ${{ secrets.SAFE_RPC_URL }}
          REOWN_API_KEY: ${{ secrets.REOWN_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          LABEL_NAME: ${{ github.event.label.name }}
        run: node scripts/labelTriggerProposal.js
"""

(workflows_path / "label-proposal.yml").write_text(workflow.strip())

# Proposal trigger script
script = """
const fetch = require("node-fetch");
const { ethers } = require("ethers");

const safeAddress = process.env.SAFE_ADDRESS;
const rpcUrl = process.env.SAFE_RPC_URL;
const apiKey = process.env.REOWN_API_KEY;
const prNumber = process.env.PR_NUMBER;

(async () => {
  try {
    const tx = {
      to: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e", // example address
      value: ethers.utils.parseEther("0.1").toString(),
      data: "0x",
      operation: 0
    };

    const res = await fetch("https://api.reown.com/safe/propose", {
      method: "POST",
      headers: {
        Authorization: `Bearer ${apiKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        safeAddress,
        rpcUrl,
        tx,
        description: `Auto-proposed via label on PR #${prNumber}`
      })
    });

    const json = await res.json();
    if (res.ok) {
      console.log(`‚úÖ Proposal triggered:`, json);
    } else {
      console.error("‚ùå Failed to propose:", json);
    }
  } catch (err) {
    console.error("‚ùå Error:", err.message);
  }
})();
"""

(scripts_path / "labelTriggerProposal.js").write_text(script.strip())

# README
readme = """
# üè∑ Label-Based Safe Proposal Trigger

## üß† What It Does:
- When a PR receives the label `safe-proposal`, a Safe tx is proposed
- Fully automated via GitHub Actions

## üì¶ Example:
- PR #42 gets labeled `safe-proposal`
- Script proposes a 0.1 ETH transfer (example)

## üîê Secrets Required:
- SAFE_ADDRESS
- SAFE_RPC_URL
- REOWN_API_KEY
- GITHUB_TOKEN
"""

(base_path / "README.md").write_text(readme.strip())

# Create ZIP
zip_file = Path("/mnt/data/SafeVault-LabelBasedTrigger.zip")
with ZipFile(zip_file, "w") as zipf:
    for file in base_path.rglob("*"):
        if file.is_file():
            zipf.write(file, file.relative_to(base_path))

zip_file.name
